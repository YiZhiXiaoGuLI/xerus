/** @example "Quick-Start"

This quick-start guide will introduce some basic functionality of the `xerus` library. 
It demonstrates the general layout and is enough for very basic applications but it is recommended to also have a look
at the more detailed guides for all classes one wishes to use - or even have a look at the class documentation for details on all functions.

It is assumed that you have already obtained and compiled the library itself as well as know how to link against it.
If this is not the case, please refer to the [building xerus](@ref md_building_xerus) page.

In the following we will solve a FEM equation arising from the heat equation using a QTT decomposition and the ALS algorithm.

To start we create the stiffness matrix as a full (ie. not sparse or decomposed) tensor.
To define the entries we pass a lambda function to the constructor of the `FullTensor` object that will be
called for every entry with a vector of size_t integers defining the indices of the current entry.
As it is simpler to think of the stiffness matrix in its original form rather than the QTT form we will 
set the dimensions to `{512,512}`, ie. create it as a 512x512 tensor.

\dontinclude quickStart.cpp
\skip Tensor
\until });

To account for the @f$ h^2 @f$ factor that we have ignored to far we simply multipy the operator by @f$ N^2 @f$.

\skipline *=

By reinterpreting the dimension and thus effectively treating the tensor as a @f$ 2^{18} @f$ instead of a @f$ 512^2 @f$ tensor,
the decomposition into a `TTTensor` will give us the stiffness matrix in a QTT format.

\skip reinterpret_dimensions
\until ttA

As the Laplace operator is representable exactly in a low-rank QTT format, the rank of this `ttA` should be low after this construction.
We can verify this by printing the ranks:

\skipline cout

For the right-hand-side we perform similar operations to obtain a QTT decomposed vector @f$ b_i = 1 \forall i @f$.
As the generating lambda function needs no index information, we create a `[]()->double` lambda function:

\skip Tensor
\until ttb

To have an initial vector for the ALS algorithm we create a random TTTensor of the desired rank 
(3 in this case - note, that this is the exact rank of the solution). This requires the definition
of a random number generator and distribution that will be used for the creation of the tensor.

\skip rnd
\until ttx

With these three tensors (the operator `ttA`, the right-hand-side `ttb` and the initial guess `ttx`)
we can now perform the ALS algorithm to solve for `ttx` (note here, that the _SPD suffix chooses the variant of the ALS
that assumes that the given operators are symmetric positive definite)

\skipline xerus::ALS_SPD

To verify the calculation performed by the ALS we will need to perform some arithmetic operations. 
As these require the definition of (relative) index orderings in the tensors, we define some indices

\skipline Index

and use these in calculations like `A(i,j)*x(j) - b(i)`. Note though, that our tensors are of a higher
degree due to the QTT decomposition and we thus need to specify the corresponding dimension of the
multiindices i,j, and k with eg. `i^9` to denote a multiindex of dimension 9.

\skip frob_norm
\until cout

To get the actual error of the ALS solution (rather than just the residual) we can calculate the exact solution
of the system using the FullTensors A, x and b and the / operator

\skip xerus::Tensor
\until /

In the comparison of this exact solution `x` and the ALS solution `ttx` the TTTensor will automatically be
cast to a FullTensor to allow the subtraction. Here we can use another index shorthand: `i&0` which denotes
a multiindex of large enough dimension to fullz index the respective tensor object.

\skipline cout

The expected output of this whole program now looks something like
~~~
ttA ranks: { 3, 3, 3, 3, 3, 3, 3, 3 }
residual: 4.93323e-11
error: 1.48729e-20
~~~

We could now also print the solution with `x.to_string()` or store in in a file to plot it with another program.
We could change our operator to define other FEM systems and many more things. As this is only a very short
introduction though, we will stop here and refer the interested reader to either the following more detailed guides or
to their own curiosity.


The full source code of this tutorial looks as follows ([tutorials/quickStart.cpp](@ref tutorials/quickStart.cpp) )
\include quickStart.cpp
*/
